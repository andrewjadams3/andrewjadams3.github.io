<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Andrew Adams]]></title>
  <link href="http://andrewada.ms/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://andrewada.ms/"/>
  <updated>2014-06-11T19:26:09-05:00</updated>
  <id>http://andrewada.ms/</id>
  <author>
    <name><![CDATA[Andrew Adams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby: Enumerable#cycle]]></title>
    <link href="http://andrewada.ms/blog/2014/ruby-enumerable-number-cycle/"/>
    <updated>2014-05-11T18:56:08-05:00</updated>
    <id>http://andrewada.ms/blog/2014/ruby-enumerable-number-cycle</id>
    <content type="html"><![CDATA[<p>For this week&rsquo;s technical blog, I will be highlighting the uses of Enumberable#cycle in Ruby. After encountering this method, I became interested in learning how it worked! Luckily, it is fairly simple to use and understand.</p>

<p>Enumerable#cycle can be called on any enumerable object (such as a range, hash, or array) just like other familiar enumerable methods (like #each or #map). When called, a block will be run, either <em>n</em> times or forever (if no number is passed as an argument).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="n">c</span><span class="p">}</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">cycle</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># ==&gt; print 1, 2, 3, 1, 2, 3&amp;hellip; forever.</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">cycle</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">v</span> <span class="p">}</span> <span class="c1"># ==&gt; print a, b, c, a, b, c.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Obviously, more complex code can be called within the block than what was just shown, but it serves as a good illustration. Be extremely careful calling #cycle without passing a number as an argument, as it will result in an infinite loop if you do not designate a break or stopping condition inside the loop (as I learned the hard way!)</p>
]]></content>
  </entry>
  
</feed>
