<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DBC | Andrew Adams]]></title>
  <link href="http://andrewada.ms/blog/categories/dbc/atom.xml" rel="self"/>
  <link href="http://andrewada.ms/"/>
  <updated>2014-06-11T20:43:24-05:00</updated>
  <id>http://andrewada.ms/</id>
  <author>
    <name><![CDATA[Andrew Adams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL or NoSQL?]]></title>
    <link href="http://andrewada.ms/blog/2014/sql-or-nosql/"/>
    <updated>2014-06-05T19:15:49-05:00</updated>
    <id>http://andrewada.ms/blog/2014/sql-or-nosql</id>
    <content type="html"><![CDATA[<p>This week I have been learning quite a bit about relational databases. Specifically, I have been learning to use SQL to construct queries. Most relational databases rely on some variant of SQL to manage and manipulate data, so knowing how to use it is an important skill. However, the popularity of non-relational, or distributed databases, is on the rise. Typically, these are referred to as NoSQL, due to the fact that they do not rely on SQL to manage their data.</p>

<p>While the name NoSQL isn&rsquo;t particularly clever, the way these databases manage data is quite unique. In fact, each NoSQL DBMS (database management system) allows for various implementations of data models that aren&rsquo;t restricted to the table-like structures of SQL (relational) databases. Key-value pairs are often used, which allows data to be stored hierarchically in data objects similar to JSON or XML. The flexibility of these types of nested structures make them ideal for large amounts of data (i.e. big data). However, the fluid nature of NoSQL databases makes them more difficult to query, and by not adhering to standard SQL, the power of their queries is diminished.</p>

<!--more-->


<p>So which is better? There are a lot of opinions on this, but the consensus seems to be (as with most technology): it depends.</p>

<p>NoSQL databases, such as MongoDB, are becoming quite popular due to advancements in the field of big data. However, as mentioned before, their data is more difficult to query, and many argue that they aren&rsquo;t nearly as reliable as relational databases. Also, there are many instances in which a tabular structure provided by a relational database is simply more appropriate (for example, a database of website users and their profile information).</p>

<p>I am looking forward to using and experimenting with both SQL and NoSQL databases in the coming months. Perhaps afterwards I will report back with a much firmer (and decidedly more passionate) opinion. Until then, you&rsquo;ll just have to try them out for yourself!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issues in tech: MOOCs]]></title>
    <link href="http://andrewada.ms/blog/2014/issues-in-tech-moocs/"/>
    <updated>2014-05-25T19:05:52-05:00</updated>
    <id>http://andrewada.ms/blog/2014/issues-in-tech-moocs</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve noticed several blogs focusing on the deficiency of STEM education in the U.S. while offering up a handful of potential solutions. This week, I would like to focus on the obstacles and struggles facing one of these solutions in particular: MOOCs.</p>

<p>MOOCs (Massive Open Online Courses) have been around in some respects for many years, but the term was just recently coined in 2008. In a modern sense, it refers to a course in which the subject matter is presented and accessed via the web. In the last two or three years, a number of universities and independent companies began offering MOOCs covering subjects associated with STEM professions, including introductions to computer science, statistics, genetics, and more. You can find these courses on sites like <a href="http://udacity.com">Udacity</a>, <a href="http://khanacademy.org">Khan Academy</a>, <a href="http://coursera.org">Coursera</a>, and <a href="http://edx.org">edX</a>.</p>

<!--more-->


<p>Interest and enrollment in these courses have been skyrocketing, and many hope that sites like these will become viable alternatives to attending traditional higher educational institutions. However, similarly to DBC, most founders admit that their models are still experiments, far from perfect, and have numerous flaws. In fact, Sebastian Thrun, founder of Udacity, flatly stated that his MOOCs were &ldquo;lousy products&rdquo; after it was revealed that only 4% of students ever completed a course. Statistics like these have put a damper on the excitement which once surrounded the MOOC community. But that doesn&rsquo;t mean that MOOCs aren&rsquo;t or can&rsquo;t be effective learning platforms.</p>

<p>I will proudly tell you that I began my journey to becoming a developer by completing a number of online courses (I even have the pdf certificates to prove it!) I must also admit that I started twice as many courses as I finished. After completing an introduction to computer science course, I immediately enrolled in a course on parsing/lexing programming languages. About halfway through, I discovered that I had not developed the practical programming skills required to complete many of the assignments. Similarly, I finished a course in statistics, and soon after enrolled in a course on data analysis. Again, I quickly discovered that while I understood the basic concepts of statistics, I didn&rsquo;t have the experience with many of the statistical models required to develop accurate analyses.</p>

<p>This highlights one of the issues with MOOCs. Many of the introductory courses are simply not comprehensive, or do not provide adequate hands-on experience. Many students also complain that there is a notable lack of support for those who are struggling. Without a mentor or a tutor, some of the complexities can be impossible to grasp.</p>

<p>Does this mean that these courses are useless? Absolutely not. The introduction to computer science course may not have taught me everything I needed to become a developer, but it did provide a solid foundation, and most importantly, showed me that I was capable of breaking into a new field of study. I may not become a data scientist from a half-completed data analysis course, but I do have a deeper respect for the profession, and a solid understanding of the role and importance of data science in our society.</p>

<p>Although many companies are starting to offer paid support in the form of tutoring and guided project development, there is still a profound sense of isolation when completing a MOOC. While this may result in high dropout rates, I believe those who stick with a course gain a better set of problem-solving and research skills, both of which are strong assets in any STEM career. The most beneficial course that I completed (and my personal favorite) was <a href="https://www.udacity.com/course/cs253">Udacity&rsquo;s CS 253: Web Development</a>. There were certainly times where I felt lost, confused, and frustrated when trying to complete an assignment. By the end however, I not only understood what a web developer was, I actually felt like one. It is because of that course that I am enrolled in DBC and am truly enjoying my work.</p>

<p>These are just a handful of concerns, and more research will show that there are many more obstacles for MOOCs to tackle before they can truly solve the issues facing STEM education. However, I believe that it is possible, and it is my hope that with the knowledge I gain through non-traditional educational models, I too will be able to help solve these problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby: Enumerable#cycle]]></title>
    <link href="http://andrewada.ms/blog/2014/ruby-enumerable-number-cycle/"/>
    <updated>2014-05-11T18:56:08-05:00</updated>
    <id>http://andrewada.ms/blog/2014/ruby-enumerable-number-cycle</id>
    <content type="html"><![CDATA[<p>For this week&rsquo;s technical blog, I will be highlighting the uses of Enumberable#cycle in Ruby. After encountering this method, I became interested in learning how it worked! Luckily, it is fairly simple to use and understand.</p>

<p>Enumerable#cycle can be called on any enumerable object (such as a range, hash, or array) just like other familiar enumerable methods (like #each or #map). When called, a block will be run, either <em>n</em> times or forever (if no number is passed as an argument).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="n">c</span><span class="p">}</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">cycle</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># ==&gt; print 1, 2, 3, 1, 2, 3&amp;hellip; forever.</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">cycle</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">v</span> <span class="p">}</span> <span class="c1"># ==&gt; print a, b, c, a, b, c.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Obviously, more complex code can be called within the block than what was just shown, but it serves as a good illustration. Be extremely careful calling #cycle without passing a number as an argument, as it will result in an infinite loop if you do not designate a break or stopping condition inside the loop (as I learned the hard way!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popularity of JavaScript]]></title>
    <link href="http://andrewada.ms/blog/2014/popularity-of-javascript/"/>
    <updated>2014-05-11T18:51:07-05:00</updated>
    <id>http://andrewada.ms/blog/2014/popularity-of-javascript</id>
    <content type="html"><![CDATA[<p>This week, I have been tasked with summarizing the popularity of JavaScript in web development. That&rsquo;s a tall order for someone who has never actually implemented JavaScript in a project, and whose experience with the language extends barely beyond <code>alert("Hello world!");</code> but I&rsquo;ll give it a shot.</p>

<p>JavaScript was designed to add interactivity to web pages. As a result, it is lightweight and fast. It is also fairly easy to implement and learn. It is supported in every major browser, meaning you can be sure that your scripts will run properly for almost all of your users (well, those who have JavaScript enabled anyway). There is also a large community with fantastic support, and a huge number of libraries available to use. Finally, Javascript has evolved to be used in multiple contexts from server-side to client-side. It&rsquo;s versatility allows programmers to use the same language to accomplish a variety of tasks.</p>

<p>In the past week, I have found learning JavaScript to be fairly straightforward. I&rsquo;m looking forward to learning more about using it in a front-end vs. back-end setting, but I guess that will have to wait until I get to Chicago!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBC Phase 0: Week 1]]></title>
    <link href="http://andrewada.ms/blog/2014/first-week-of-dbc/"/>
    <updated>2014-04-29T22:03:07-05:00</updated>
    <id>http://andrewada.ms/blog/2014/first-week-of-dbc</id>
    <content type="html"><![CDATA[<p>Just a few days ago, I completed my first week of Phase 0 in preparation for attending Dev Bootcamp. I would have written this blog post sooner, but to be honest, I needed a break from writing. I&rsquo;ve never believed writing to be one of my strong suits, but I created this blog so I could gain experience, and also improve my abilities to communicate my thoughts and feelings. As it turns out, the challenges for Phase 0 in DBC are requiring me to do just that! For every coding objective I complete, I have been spending just as much time (if not more) reflecting on what I learned/how I felt. It&rsquo;s a requirement, and I&rsquo;ll admit, it&rsquo;s a bit tedious. I&rsquo;ve been finding myself completing an objective in a timely manner, and immediately wasting an hour or two browsing Reddit to avoid writing the reflection. <em>But.</em> I can already tell that these reflections are going to make the difference between completing an objective, and actually <em>learning</em> an objective.</p>

<!-- more -->


<p>When I first began learning web development on my own, I was a sponge, absorbing any new piece of information that I could find. As I progressed, however, I began to feel a bit overwhelmed by the enormous amount of resources, documentation, and tutorials available online. It became difficult to differentiate between what was useful and what was superfluous. This was part of the reason I enrolled in DBC; I needed some guidance and direction from those who truly know the difference. Part of the issue, though, was that the more I read, the more I started to skim and skip through sections of material. The satisfaction of completing a chapter in a book became irrelevant when I realized that I didn&rsquo;t understand most of it. But this past week, when I was forced to not only practice, but reflect on the material, I found that I once again gained the ability to truly absorb and retain information.</p>

<p>I may not be a fan of putting my thought process into words, but if doing so will help me improve as a developer and a person, I&rsquo;m all for it. <strong>That&rsquo;s</strong> why I&rsquo;m writing this post right now. <strong>That&rsquo;s</strong> why I&rsquo;m headed to DBC. I can&rsquo;t wait for week 2.</p>
]]></content>
  </entry>
  
</feed>
