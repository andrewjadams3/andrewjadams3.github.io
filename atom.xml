<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andrew Adams]]></title>
  <link href="http://andrewada.ms/atom.xml" rel="self"/>
  <link href="http://andrewada.ms/"/>
  <updated>2014-09-02T10:50:29-05:00</updated>
  <id>http://andrewada.ms/</id>
  <author>
    <name><![CDATA[Andrew Adams]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Recursion]]></title>
    <link href="http://andrewada.ms/blog/2014/recursion/"/>
    
    <updated>2014-06-14T16:22:09-05:00</updated>
    <id>http://andrewada.ms/blog/2014/recursion</id>
    
    <content type="html"><![CDATA[<p>Recursion is a tricky subject. There are hundreds of blog posts strewn across the internet attempting to provide thorough explanations, often accompanied by seemingly simple snippets of code. No matter how elegant these explanations may be, most people find themselves working through example after example before finally (<em>maybe, kind of</em>) starting to get a hold on the subject. I&rsquo;ve decided (against my better judgment) to toss my hat into the ring, and highlight a few examples which helped me initially understand recursion. Hopefully they will help you experience a &lsquo;light bulb moment&rsquo; as they did for me.</p>

<!-- more -->


<p>Recursion in programming refers to a function/method which calls itself. It&rsquo;s that simple! Well, simple in theory. In practice, recursive functions can be difficult to design and interpret. In fact, recursive methods are often hard to follow precisely <em>because</em> they are deceptively simple. In just two or three lines, you can write a recursive method which does a whole hell of a lot of work.</p>

<p>Let&rsquo;s first look at how we can write a method which calls itself in Ruby:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">smaller</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">num</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">smaller</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">smaller</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">forever</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, you can see that the <code>smaller</code> method takes a number as an argument, prints that number, and then  returns a call to itself, passing <code>num-1</code> as an argument. In essence, the method is simply counting backwards from the original number.</p>

<p>This is great, we&rsquo;ve already created a recursive method! With one problem, however: it will never end. If you run this method as-is, it will never stop <code>puts</code>ing smaller and smaller numbers. To fix this, we need a base case.</p>

<p>A <strong>base case</strong> prevents a recursive method from calling itself when a certain condition is met. In the case of our <code>smaller</code> method, a logical base case could be when the number 0 is reached, or more specifically, when the number zero is passed as an argument. When this happens, we will simply have the method <code>return</code> rather than call itself again.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">smaller</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">num</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">smaller</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">smaller</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every time the <code>smaller</code> method runs, it calls itself with a smaller number. Eventually, the number 0 will be reached, and the method will end. There are, of course, shorter ways to write the code above, but the if/else statement illustrates very clearly what is happening.</p>

<p>At this point, you may be thinking, &ldquo;hey, that looks just like a loop!&rdquo; And you&rsquo;d be right! Anything that can be written recursively can also be refactored and written as a loop. In fact, depending on the problem being solved, a recursive function can eat up resources exponentially faster than its looped counterpart. However, recursive functions are often more elegant, and in many situations, simpler to implement.</p>

<p>Let&rsquo;s look at one, slightly more complex example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">smaller_ary</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">array</span><span class="o">=[]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">array</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">num</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">smaller_ary</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you tell what this code is doing? And if so, what is the base case? What would happen if we called <code>smaller_ary(3)</code>? Let&rsquo;s find out!</p>

<p>First, let&rsquo;s find our base case:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">array</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the <code>num</code> argument is less than 0, the <code>array</code> argument will be returned. Although our previous example simply <code>return</code>ed, a base case doesn&rsquo;t necessarily need to return nothing. In fact, a base case is usually going to return <em>something</em>, either directly, or to be handed back to previous recursive calls.</p>

<p>If that was our base case, this would be our recursive call:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">else</span>
</span><span class='line'>      <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">num</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">smaller_ary</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When <code>num</code> is not smaller than zero (for example: 3), that number will first be appended onto the <code>array</code> argument. <em>(You may have noticed that when this method is called with only a number as an argument, the <code>array</code> argument will default to an empty array.)</em> Next, a call to <code>smaller_ary</code> will be returned, passing <code>num-1</code> and the newly-appended <code>array</code> as arguments. This call will send us right back to the top, only with a slightly smaller number. Each time the base case is not met, the number will be added to the array, and the method will be called with the next smallest number. When a number smaller than 0 is finally passed as an argument, the now-longer <code>array</code> will be returned.</p>

<p>So what happens when we call <code>smaller_ary(3)</code>? Here&rsquo;s a breakdown:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">smaller_ary</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">array</span><span class="o">=[]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="c1"># base case</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">array</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="c1"># append the number to the array</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">smaller_ary</span><span class="p">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span> <span class="c1"># getting closer to the base case</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">smaller_ary</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; [3, 2, 1, 0]</span>
</span></code></pre></td></tr></table></div></figure>


<p>These examples have been great introductions to recursion, but they simply scratch the surface in terms of what can be accomplished. Most recursive methods go beyond emulating loops and divide complex problems into smaller, simpler, sub-problems. If you&rsquo;d like to learn more, check out <a href="http://www.theodinproject.com/ruby-programming/recursive-methods">this article from The Odin Project</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[SQL or NoSQL?]]></title>
    <link href="http://andrewada.ms/blog/2014/sql-or-nosql/"/>
    
    <updated>2014-06-05T19:15:49-05:00</updated>
    <id>http://andrewada.ms/blog/2014/sql-or-nosql</id>
    
    <content type="html"><![CDATA[<p>This week I have been learning quite a bit about relational databases. Specifically, I have been learning to use SQL to construct queries. Most relational databases rely on some variant of SQL to manage and manipulate data, so knowing how to use it is an important skill. However, the popularity of non-relational, or distributed databases, is on the rise. Typically, these are referred to as NoSQL, due to the fact that they do not rely on SQL to manage their data.</p>

<p>While the name NoSQL isn&rsquo;t particularly clever, the way these databases manage data is quite unique. In fact, each NoSQL DBMS (database management system) allows for various implementations of data models that aren&rsquo;t restricted to the table-like structures of SQL (relational) databases. Key-value pairs are often used, which allows data to be stored hierarchically in data objects similar to JSON or XML. The flexibility of these types of nested structures make them ideal for large amounts of data (i.e. big data). However, the fluid nature of NoSQL databases makes them more difficult to query, and by not adhering to standard SQL, the power of their queries is diminished.</p>

<!--more-->


<p>So which is better? There are a lot of opinions on this, but the consensus seems to be (as with most technology): it depends.</p>

<p>NoSQL databases, such as MongoDB, are becoming quite popular due to advancements in the field of big data. However, as mentioned before, their data is more difficult to query, and many argue that they aren&rsquo;t nearly as reliable as relational databases. Also, there are many instances in which a tabular structure provided by a relational database is simply more appropriate (for example, a database of website users and their profile information).</p>

<p>I am looking forward to using and experimenting with both SQL and NoSQL databases in the coming months. Perhaps afterwards I will report back with a much firmer (and decidedly more passionate) opinion. Until then, you&rsquo;ll just have to try them out for yourself!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Issues in tech: MOOCs]]></title>
    <link href="http://andrewada.ms/blog/2014/issues-in-tech-moocs/"/>
    
    <updated>2014-05-25T19:05:52-05:00</updated>
    <id>http://andrewada.ms/blog/2014/issues-in-tech-moocs</id>
    
    <content type="html"><![CDATA[<p>I&rsquo;ve noticed several blogs focusing on the deficiency of STEM education in the U.S. while offering up a handful of potential solutions. This week, I would like to focus on the obstacles and struggles facing one of these solutions in particular: MOOCs.</p>

<p>MOOCs (Massive Open Online Courses) have been around in some respects for many years, but the term was just recently coined in 2008. In a modern sense, it refers to a course in which the subject matter is presented and accessed via the web. In the last two or three years, a number of universities and independent companies began offering MOOCs covering subjects associated with STEM professions, including introductions to computer science, statistics, genetics, and more. You can find these courses on sites like <a href="http://udacity.com">Udacity</a>, <a href="http://khanacademy.org">Khan Academy</a>, <a href="http://coursera.org">Coursera</a>, and <a href="http://edx.org">edX</a>.</p>

<!--more-->


<p>Interest and enrollment in these courses have been skyrocketing, and many hope that sites like these will become viable alternatives to attending traditional higher educational institutions. However, similarly to DBC, most founders admit that their models are still experiments, far from perfect, and have numerous flaws. In fact, Sebastian Thrun, founder of Udacity, flatly stated that his MOOCs were &ldquo;lousy products&rdquo; after it was revealed that only 4% of students ever completed a course. Statistics like these have put a damper on the excitement which once surrounded the MOOC community. But that doesn&rsquo;t mean that MOOCs aren&rsquo;t or can&rsquo;t be effective learning platforms.</p>

<p>I will proudly tell you that I began my journey to becoming a developer by completing a number of online courses (I even have the pdf certificates to prove it!) I must also admit that I started twice as many courses as I finished. After completing an introduction to computer science course, I immediately enrolled in a course on parsing/lexing programming languages. About halfway through, I discovered that I had not developed the practical programming skills required to complete many of the assignments. Similarly, I finished a course in statistics, and soon after enrolled in a course on data analysis. Again, I quickly discovered that while I understood the basic concepts of statistics, I didn&rsquo;t have the experience with many of the statistical models required to develop accurate analyses.</p>

<p>This highlights one of the issues with MOOCs. Many of the introductory courses are simply not comprehensive, or do not provide adequate hands-on experience. Many students also complain that there is a notable lack of support for those who are struggling. Without a mentor or a tutor, some of the complexities can be impossible to grasp.</p>

<p>Does this mean that these courses are useless? Absolutely not. The introduction to computer science course may not have taught me everything I needed to become a developer, but it did provide a solid foundation, and most importantly, showed me that I was capable of breaking into a new field of study. I may not become a data scientist from a half-completed data analysis course, but I do have a deeper respect for the profession, and a solid understanding of the role and importance of data science in our society.</p>

<p>Although many companies are starting to offer paid support in the form of tutoring and guided project development, there is still a profound sense of isolation when completing a MOOC. While this may result in high dropout rates, I believe those who stick with a course gain a better set of problem-solving and research skills, both of which are strong assets in any STEM career. The most beneficial course that I completed (and my personal favorite) was <a href="https://www.udacity.com/course/cs253">Udacity&rsquo;s CS 253: Web Development</a>. There were certainly times where I felt lost, confused, and frustrated when trying to complete an assignment. By the end however, I not only understood what a web developer was, I actually felt like one. It is because of that course that I am enrolled in DBC and am truly enjoying my work.</p>

<p>These are just a handful of concerns, and more research will show that there are many more obstacles for MOOCs to tackle before they can truly solve the issues facing STEM education. However, I believe that it is possible, and it is my hope that with the knowledge I gain through non-traditional educational models, I too will be able to help solve these problems.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Ruby: Enumerable#cycle]]></title>
    <link href="http://andrewada.ms/blog/2014/ruby-enumerable-number-cycle/"/>
    
    <updated>2014-05-11T18:56:08-05:00</updated>
    <id>http://andrewada.ms/blog/2014/ruby-enumerable-number-cycle</id>
    
    <content type="html"><![CDATA[<p>For this week&rsquo;s technical blog, I will be highlighting the uses of Enumberable#cycle in Ruby. After encountering this method, I became interested in learning how it worked! Luckily, it is fairly simple to use and understand.</p>

<p>Enumerable#cycle can be called on any enumerable object (such as a range, hash, or array) just like other familiar enumerable methods (like #each or #map). When called, a block will be run, either <em>n</em> times or forever (if no number is passed as an argument).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="n">b</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="n">c</span><span class="p">}</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">cycle</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="p">}</span> <span class="c1"># ==&gt; print 1, 2, 3, 1, 2, 3... forever.</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">cycle</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">v</span> <span class="p">}</span> <span class="c1"># ==&gt; print a, b, c, a, b, c.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, more complex code can be called within the block than what was just shown, but it serves as a good illustration. Be extremely careful calling #cycle without passing a number as an argument, as it will result in an infinite loop if you do not designate a break or stopping condition inside the loop (as I learned the hard way!)</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Popularity of JavaScript]]></title>
    <link href="http://andrewada.ms/blog/2014/popularity-of-javascript/"/>
    
    <updated>2014-05-11T18:51:07-05:00</updated>
    <id>http://andrewada.ms/blog/2014/popularity-of-javascript</id>
    
    <content type="html"><![CDATA[<p>This week, I have been tasked with summarizing the popularity of JavaScript in web development. That&rsquo;s a tall order for someone who has never actually implemented JavaScript in a project, and whose experience with the language extends barely beyond <code>alert("Hello world!");</code> but I&rsquo;ll give it a shot.</p>

<p>JavaScript was designed to add interactivity to web pages. As a result, it is lightweight and fast. It is also fairly easy to implement and learn. It is supported in every major browser, meaning you can be sure that your scripts will run properly for almost all of your users (well, those who have JavaScript enabled anyway). There is also a large community with fantastic support, and a huge number of libraries available to use. Finally, Javascript has evolved to be used in multiple contexts from server-side to client-side. It&rsquo;s versatility allows programmers to use the same language to accomplish a variety of tasks.</p>

<p>In the past week, I have found learning JavaScript to be fairly straightforward. I&rsquo;m looking forward to learning more about using it in a front-end vs. back-end setting, but I guess that will have to wait until I get to Chicago!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[DBC Phase 0: Week 1]]></title>
    <link href="http://andrewada.ms/blog/2014/first-week-of-dbc/"/>
    
    <updated>2014-04-29T22:03:07-05:00</updated>
    <id>http://andrewada.ms/blog/2014/first-week-of-dbc</id>
    
    <content type="html"><![CDATA[<p>Just a few days ago, I completed my first week of Phase 0 in preparation for attending Dev Bootcamp. I would have written this blog post sooner, but to be honest, I needed a break from writing. I&rsquo;ve never believed writing to be one of my strong suits, but I created this blog so I could gain experience, and also improve my abilities to communicate my thoughts and feelings. As it turns out, the challenges for Phase 0 in DBC are requiring me to do just that! For every coding objective I complete, I have been spending just as much time (if not more) reflecting on what I learned/how I felt. It&rsquo;s a requirement, and I&rsquo;ll admit, it&rsquo;s a bit tedious. I&rsquo;ve been finding myself completing an objective in a timely manner, and immediately wasting an hour or two browsing Reddit to avoid writing the reflection. <em>But.</em> I can already tell that these reflections are going to make the difference between completing an objective, and actually <em>learning</em> an objective.</p>

<!-- more -->


<p>When I first began learning web development on my own, I was a sponge, absorbing any new piece of information that I could find. As I progressed, however, I began to feel a bit overwhelmed by the enormous amount of resources, documentation, and tutorials available online. It became difficult to differentiate between what was useful and what was superfluous. This was part of the reason I enrolled in DBC; I needed some guidance and direction from those who truly know the difference. Part of the issue, though, was that the more I read, the more I started to skim and skip through sections of material. The satisfaction of completing a chapter in a book became irrelevant when I realized that I didn&rsquo;t understand most of it. But this past week, when I was forced to not only practice, but reflect on the material, I found that I once again gained the ability to truly absorb and retain information.</p>

<p>I may not be a fan of putting my thought process into words, but if doing so will help me improve as a developer and a person, I&rsquo;m all for it. <strong>That&rsquo;s</strong> why I&rsquo;m writing this post right now. <strong>That&rsquo;s</strong> why I&rsquo;m headed to DBC. I can&rsquo;t wait for week 2.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Blogging with Octopress]]></title>
    <link href="http://andrewada.ms/blog/2014/blogging-with-octopress/"/>
    
    <updated>2014-04-19T23:29:19-05:00</updated>
    <id>http://andrewada.ms/blog/2014/blogging-with-octopress</id>
    
    <content type="html"><![CDATA[<p>It&rsquo;s been less than a month since I launched this blog, but this weekend I decided it was time for an overhaul. I originally used WordPress so I could have more control over my content, but I ended up feeling uneasy about the whole thing. Most of the theming options were too flashy, and in my opinion, difficult to customize. Writing my posts in a web-based editor turned out to be less than ideal, and I didn&rsquo;t feel like my content was secure unless I made frequent backups. I needed a simpler way to blog that put me in total control. That&rsquo;s when I discovered <a href="http://octopress.org/" title="Octopress">Octopress</a>.</p>

<!--more-->


<p>Octopress is a blog framework designed for <a href="https://github.com/jekyll/jekyll" title="Jekyll">Jekyll</a>, a static site generator. Octopress comes with great customizable templates, useful plugins, and is very simple to set up. All posts are written in <a href="http://daringfireball.net/projects/markdown/syntax" title="Markdown">Markdown</a> syntax, and then &ldquo;baked&rdquo; into static HTML when the site is generated. In fact, the entire site is baked before it is deployed, making it extremely lightweight and responsive.</p>

<p>I now have the ability to develop my blog entirely on my personal machine and preview changes through a local server. The best part is that Octopress is compatible with <a href="https://pages.github.com/" title="GitHub Pages">GitHub Pages</a>, therefore allowing me to simply push my content (both the static site and source code) to GitHub to deploy updates. How cool is that?</p>

<p>Octopress bills itself as &ldquo;A Blogging Framework for Hackers.&rdquo; As such, it ships with several plugins for sharing code snippets and embedding files. I&rsquo;m excited to start sharing my work on this blog as I start digging deeper into web development, and these plugins are going to make it a whole lot easier.</p>

<p>Making the switch was quite easy (and not just because I&rsquo;ve only published a handful of posts). There are many tools available to help convert WordPress or HTML content to Markdown. Just search around, you should be able to find one that works for you. If you&rsquo;re unhappy with your current blog, or are considering starting a new one, I highly recommend you take a look at <a href="http://octopress.org/" title="Octopress">Octopress</a>.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Comparing frameworks]]></title>
    <link href="http://andrewada.ms/blog/2014/comparing-frameworks/"/>
    
    <updated>2014-04-14T23:33:00-05:00</updated>
    <id>http://andrewada.ms/blog/2014/comparing-frameworks</id>
    
    <content type="html"><![CDATA[<p>As I&rsquo;ve been working my way through <a title="Rails Tutorial" href="http://ruby.railstutorial.org/" target="_blank">Michael Hartl&rsquo;s Rails Tutorial</a>, I&rsquo;ve become increasingly aware of just how beneficial taking <a title="CS 253 Web Development" href="https://www.udacity.com/course/cs253" target="_blank">Steve Huffman&rsquo;s web development course</a> back in January really was. While I think the Rails tutorial is great, a lot copying and pasting code is required, which is followed only by a brief overview of what it does. Not to mention, much of the code is heavily abstracted in order to save time.</p>

<!-- more -->


<p>I now understand why Steve took the approach of teaching web development on a low-level framework: by getting your hands dirty and coding many of the functions that are already built into Rails and other frameworks, you gain a deeper understanding of the intricate connections within a dynamic website. While I am still learning, I find it much easier to understand the parallels between what the tutorial is showing me, and what I have already accomplished.</p>

<p>That being said, I am truly enjoying the comparative simplicity of Rails! After Steve repeatedly warned against high-level frameworks, I was a little wary to make a switch. However, <a title="Does Rails and Django abstract away too much for beginners?" href="http://qr.ae/vlN3S" target="_blank">this post on Quora</a> convinced me otherwise. <a id="__w2_eLPo9ze_link" href="http://www.quora.com/Nupul-Kukreja">Nupul Kukreja</a> provides the analogy of building a car:</p>

<blockquote><p>You want something that has already put the major parts of the car together so that you can focus on designing the car itself and not worry about putting the engine, steering wheel, seats etc., all together.</p></blockquote>


<p>Focusing on design aspects will certainly be one of my next big challenges, but I can already see Rails opening up many opportunities to experiment and learn.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[New projects on GitHub]]></title>
    <link href="http://andrewada.ms/blog/2014/new-projects-on-github/"/>
    
    <updated>2014-03-30T12:37:00-05:00</updated>
    <id>http://andrewada.ms/blog/2014/new-projects-on-github</id>
    
    <content type="html"><![CDATA[<p>I&rsquo;ve just added the source code for a couple of projects I completed for Udacity&rsquo;s web development course to my <a title="andrewjadams3 on GitHub" href="https://github.com/andrewjadams3" target="_blank">Github</a>. The first is a <a title="CS 253 Blog" href="https://github.com/andrewjadams3/CS-253-Blog" target="_blank">simple blog</a> with some basic features like user authentication and adding posts (the templates certainly need updating though). The second is a <a title="CS 253 Wiki" href="https://github.com/andrewjadams3/CS-253-Wiki" target="_blank">wiki</a> which is slightly more complex, fleshed out, and user-friendly. Both apps are Python-based and hosted on Google App Engine.</p>

<p>I will be featuring some of my work on the <a title="Projects" href="http://andrewada.ms/projects" target="_blank">projects page</a> of this site as I continue to develop and learn. I am working through <a title="Michael Hartl's Ruby on Rails Tutorial" href="http://ruby.railstutorial.org/" target="_blank">Michael Hartl&rsquo;s Ruby on Rails tutorial</a> at the moment, hopefully I&rsquo;ll be able to share my first rails app soon!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[The teacher becomes the student]]></title>
    <link href="http://andrewada.ms/blog/2014/the-teacher-becomes-the-student/"/>
    
    <updated>2014-03-22T12:28:00-05:00</updated>
    <id>http://andrewada.ms/blog/2014/the-teacher-becomes-the-student</id>
    
    <content type="html"><![CDATA[<p>Over the past several months, I have been learning how to code. For some reason, I had always been intimidated by code, and had turned down many opportunities to learn. I had convinced myself that I needed to focus on teaching and music, rather than accept the fact that I was afraid to fail. However, as soon as I took the leap, I was hooked.</p>

<p>At the onset, I adopted the attitude that I would &ldquo;teach myself&rdquo;, and simply absorb new information as I went along. After all, that&rsquo;s how it worked when I was a kid &ndash; building silly websites and copying javascript examples! While this was possible to an extent, I soon discovered that I couldn&rsquo;t do everything alone. The number of people online who are eager to share their knowledge about any given subject is unbelievable. I needed to become a student and allow myself to learn from them.</p>

<!-- more -->


<p>After completing a few tracks on <a title="Code Academy" href="http://codeacademy.com" target="_blank">Code Academy</a>, I enrolled in <a title="Udacity CS 101" href="https://www.udacity.com/course/cs101" target="_blank">CS101 on Udacity.</a> From there, I moved on to <a title="Udacity CS 253" href="https://www.udacity.com/course/cs253" target="_blank">Steve Huffman&rsquo;s web development course</a>, and even took a refresher in <a title="Udacity ST 101" href="https://www.udacity.com/course/st101" target="_blank">statistics</a>. In just over a month, I was parsing HTML, managing databases, and using tons of cool acronyms. I&rsquo;ve have since been working on numerous code challenges and side projects, and diving into too many books to remember.</p>

<p>When I first read about <a title="Dev Bootcamp" href="http://devbootcamp.com/" target="_blank">Dev Bootcamp</a>, it seemed like exactly the type of experience I needed: intense learning, constant collaboration and support, and the prospect of a new career in the field I was engrossed in.  After reading overwhelmingly positive reviews from alumni (like <a title="Natasha the Robot" href="http://natashatherobot.com/" target="_blank">Natasha the Robot</a>), I decided to take a chance and apply.</p>

<p>Now I&rsquo;m in! In June, I&rsquo;ll be leaving my friends, family, and job in Kansas City to move to Chicago for 9 weeks. I still have no idea if I&rsquo;ll stay, move back, or head somewhere else entirely, but this is a huge step. I&rsquo;ve already begun the transition from Python to Ruby, and am following <a title="DBC Prep Objectives" href="https://gist.github.com/andrewjadams3/9572050#dbc-prep-objectives" target="_blank">this checklist</a> to prepare. I&rsquo;ll be updating this blog (with considerably shorter posts from now on) with projects, discoveries, failures, and successes. I can&rsquo;t wait to find out where these next few months will lead!</p>
]]></content>
    
  </entry>
  
</feed>